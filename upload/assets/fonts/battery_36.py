# Code generated by font_to_py.py.
# Font: Battery-Icons.otf Char set: ARST
# Cmd: font_to_py.py -x -f Battery-Icons.otf 36 battery_36.py -c ARST
version = '0.33'

def height():
    return 36

def baseline():
    return 36

def max_width():
    return 22

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 63

def max_ch():
    return 84

_font =\
b'\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00'\
b'\x01\xff\x00\x01\xff\x00\x01\xff\x00\x3f\xff\xf8\x3f\xff\xf8\x3f'\
b'\xff\xf8\x3f\xff\xf8\x38\x00\x38\x38\x00\x38\x38\x00\x38\x38\x00'\
b'\x38\x38\x00\x38\x38\x00\x38\x38\x00\x38\x38\x00\x38\x3f\xff\xf8'\
b'\x3f\xff\xf8\x38\x00\x38\x38\x00\x38\x38\x00\x38\x38\x00\x38\x38'\
b'\x00\x38\x38\x00\x38\x38\x00\x38\x38\x00\x38\x3f\xff\xf8\x3f\xff'\
b'\xf8\x38\x00\x38\x38\x00\x38\x38\x00\x38\x38\x00\x38\x38\x00\x38'\
b'\x38\x00\x38\x38\x00\x38\x3f\xff\xf8\x3f\xff\xf8\x16\x00\x03\xfe'\
b'\x00\x03\xfe\x00\x03\xfe\x00\x03\xfe\x00\x7f\xff\xf0\x7f\xff\xf0'\
b'\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f'\
b'\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x70\x00'\
b'\x70\x70\x00\x70\x70\x00\x70\x70\x00\x70\x70\x00\x70\x70\x00\x70'\
b'\x70\x00\x70\x7f\xff\xf0\x7f\xff\xf0\x70\x00\x70\x70\x00\x70\x70'\
b'\x00\x70\x70\x00\x70\x70\x00\x70\x70\x00\x70\x70\x00\x70\x70\x00'\
b'\x70\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x16\x00\x03\xfc\x00\x03'\
b'\xfc\x00\x03\xfc\x00\x03\xfc\x00\x7f\xff\xe0\x7f\xff\xe0\x7f\xff'\
b'\xe0\x7f\xff\xe0\x7f\xff\xe0\x7f\xff\xe0\x7f\xff\xe0\x7f\xff\xe0'\
b'\x7f\xff\xe0\x7f\xff\xe0\x7f\xff\xe0\x7f\xff\xe0\x7f\xff\xe0\x7f'\
b'\xff\xe0\x7f\xff\xe0\x7f\xff\xe0\x7f\xff\xe0\x7f\xff\xe0\x7f\xff'\
b'\xe0\x7f\xff\xe0\x7f\xff\xe0\x7f\xff\xe0\x60\x00\x60\x60\x00\x60'\
b'\x60\x00\x60\x60\x00\x60\x60\x00\x60\x60\x00\x60\x60\x00\x60\x7f'\
b'\xff\xe0\x7f\xff\xe0\x7f\xff\xe0\x16\x00\x03\xfe\x00\x03\xfe\x00'\
b'\x03\xfe\x00\x3f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f'\
b'\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff'\
b'\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0'\
b'\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f'\
b'\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff'\
b'\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0\x7f\xff\xf0'\
b'\x7f\xff\xf0\x7f\xff\xf0'

_index =\
b'\x00\x00\x00\x00\x00\x00\x6e\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\xdc\x00\x4a\x01\xb8\x01\x26\x02'\

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)

def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 63 + 1) if oc >= 63 and oc <= 84 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 36
    return _mvfont[doff + 2:next_offs], 36, width
 
